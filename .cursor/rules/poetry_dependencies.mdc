---
description: Todas as dependências do projeto devem ser gerenciadas via Poetry
globs: **/*.py, pyproject.toml
alwaysApply: true
---

# Gerenciamento de Dependências com Poetry

- **Use sempre Poetry para gerenciar dependências do projeto**
  - Todas as bibliotecas devem ser adicionadas via `poetry add` 
  - Mantenha todas as dependências no arquivo `pyproject.toml`
  - Evite instalar pacotes diretamente com pip
  - Mantenha o `poetry.lock` sob controle de versão para garantir reprodutibilidade

- **Adicionando dependências**
  - ✅ DO: Use `poetry add <pacote>` para adicionar dependências de produção
  - ✅ DO: Use `poetry add -D <pacote>` para dependências de desenvolvimento
  - ✅ DO: Especifique versões quando necessário (ex: `poetry add fastapi>=0.100.0`)
  - ✅ DO: Documente novas dependências nos arquivos de log das tarefas
  - ❌ DON'T: Modifique manualmente `pyproject.toml` sem executar `poetry update`
  - ❌ DON'T: Use `pip install` diretamente no ambiente do projeto

- **Grupos de dependências**
  - Use `[tool.poetry.dependencies]` para dependências principais
  - Use `[tool.poetry.group.dev.dependencies]` para ferramentas de desenvolvimento
  - Considere criar grupos adicionais para necessidades específicas:
    ```toml
    [tool.poetry.group.test.dependencies]
    pytest = "^7.3.1"
    pytest-cov = "^4.1.0"
    
    [tool.poetry.group.docs.dependencies]
    sphinx = "^6.1.3"
    ```
    
- **Manutenção de dependências**
  - Atualize regularmente as dependências com `poetry update`
  - Verifique vulnerabilidades com `poetry check`
  - Documente as razões para dependências nas atualizações do `pyproject.toml`
  - Configure limites de versão apropriados para evitar quebras inesperadas

- **Integração com ambientes Docker**
  - Inclua as instruções de instalação via Poetry nos Dockerfiles
  - Exemplo:
    ```dockerfile
    FROM python:3.9-slim
    WORKDIR /app
    
    # Instalar Poetry
    RUN pip install poetry
    
    # Copiar os arquivos de configuração do Poetry
    COPY pyproject.toml poetry.lock* ./
    
    # Configurar Poetry para não criar ambiente virtual no container
    RUN poetry config virtualenvs.create false
    
    # Instalar dependências
    RUN poetry install --no-dev --no-interaction
    
    # Copiar o código fonte
    COPY . .
    
    CMD ["python", "backend/main.py"]
    ```

- **Resolução de conflitos**
  - Em caso de conflitos de dependências, analise e resolva através do Poetry
  - Use `poetry show -t` para visualizar a árvore de dependências
  - Use `poetry show <pacote>` para ver detalhes de uma dependência específica
  - Ajuste versões em `pyproject.toml` e execute `poetry update` para resolver 